pragma solidity ^0.8.0;

contract Stablecoin {
    string public constant name = "Your Stablecoin";
    string public constant symbol = "STBL";
    uint8 public constant decimals = 18;
    
    mapping(address => uint256) private balances;
    mapping(address => mapping(address => uint256)) private allowed;
    
    uint256 private totalSupply_;
    uint256 private constant initialSupply = 1000000 * (10 ** uint256(decimals));
    uint256 private constant peggedValue = 1 * (10 ** uint256(decimals));
    
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    
    constructor() {
        totalSupply_ = initialSupply;
        balances[msg.sender] = initialSupply;
    }
    
    function totalSupply() public view returns (uint256) {
        return totalSupply_;
    }
    
    function balanceOf(address account) public view returns (uint256) {
        return balances[account];
    }
    
    function transfer(address recipient, uint256 amount) public returns (bool) {
        require(amount <= balances[msg.sender], "Insufficient balance");
        require(recipient != address(0), "Invalid recipient");

        balances[msg.sender] -= amount;
        balances[recipient] += amount;
        
        emit Transfer(msg.sender, recipient, amount);
        
        return true;
    }
    
    function approve(address spender, uint256 amount) public returns (bool) {
        allowed[msg.sender][spender] = amount;
        
        emit Approval(msg.sender, spender, amount);
        
        return true;
    }
    
    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
        require(amount <= balances[sender], "Insufficient balance");
        require(amount <= allowed[sender][msg.sender], "Insufficient allowance");
        require(recipient != address(0), "Invalid recipient");

        balances[sender] -= amount;
        balances[recipient] += amount;
        allowed[sender][msg.sender] -= amount;
        
        emit Transfer(sender, recipient, amount);
        
        return true;
    }
    
    function allowance(address owner, address spender) public view returns (uint256) {
        return allowed[owner][spender];
    }
    
    // Additional functions to manage the stablecoin's pegged value to the USD
    
    function getExchangeRate() public pure returns (uint256) {
        return peggedValue;
    }
    
    function deposit() public payable {
        require(msg.value > 0, "Invalid amount");
        uint256 tokens = msg.value * peggedValue / 1 ether;
        
        totalSupply_ += tokens;
        balances[msg.sender] += tokens;
        
        emit Transfer(address(0), msg.sender, tokens);
    }
    
    function withdraw(uint256 tokens) public {
        require(tokens > 0, "Invalid amount");
        require(tokens <= balances[msg.sender], "Insufficient balance");
        
        uint256 amount = tokens * 1 ether / peggedValue;
        
        totalSupply_ -= tokens;
        balances[msg.sender] -= tokens;
        
        (bool success, ) = msg.sender.call{value: amount}("");
        require(success, "Transfer failed");
        
        emit Transfer(msg.sender, address(0), tokens);
    }
}
